var N = null;var searchIndex = {};
searchIndex["pwasm_abi"]={"doc":"WASM ABI Tools","items":[[0,"eth","pwasm_abi","Legacy Ethereum-like ABI generator",N,N],[3,"Stream","pwasm_abi::eth","Stream interpretation of incoming payload",N,N],[3,"Sink","","Sink for returning number of arguments",N,N],[4,"Error","","Error for decoding rust types from stream",N,N],[13,"InvalidBool","","Invalid bool for provided input",0,N],[13,"InvalidU32","","Invalid u32 for provided input",0,N],[13,"InvalidU64","","Invalid u64 for provided input",0,N],[13,"UnexpectedEof","","Unexpected end of the stream",0,N],[13,"InvalidPadding","","Invalid padding for fixed type",0,N],[13,"Other","","Other error",0,N],[11,"new","","New stream for known payload",1,N],[11,"pop","","Pop next argument of known type",1,[[["self"]],["result",["error"]]]],[11,"position","","Current position for the stream",1,[[["self"]],["usize"]]],[11,"advance","","Advance stream position for `amount` bytes",1,[[["self"],["usize"]],["result",["usize","error"]]]],[11,"finish_advance","","Finish current advance, advancing stream to the next 32 byte step",1,[[["self"]]]],[11,"payload","","Stream payload",1,N],[11,"peek","","Peek next byte in stream",1,[[["self"]],["u8"]]],[11,"new","","New sink with known capacity",2,[[["usize"]],["self"]]],[11,"push","","Consume `val` to the Sink",2,[[["self"],["t"]]]],[11,"drain_to","","Drain current Sink to the target vector",2,[[["self"],["vec"]]]],[11,"finalize_panicking","","Consume current Sink to produce a vector with content. May panic if declared number of arguments does not match the resulting number of bytes should be produced.",2,[[["self"]],["vec",["u8"]]]],[11,"preamble_mut","","Mutable reference to the Sink preamble",2,[[["self"]],["vec"]]],[11,"heap_mut","","Mutable reference to the Sink heap",2,[[["self"]],["vec"]]],[8,"AsLog","","As log trait for how primitive types are represented as indexed arguments of the event log",N,N],[10,"as_log","","Convert type to hash representation for the event log.",3,[[["self"]],["h256"]]],[8,"AbiType","","Abi type trait",N,N],[10,"decode","","Insantiate type from data stream Should never be called manually! Use stream.pop()",4,[[["stream"]],["result",["error"]]]],[10,"encode","","Push type to data sink Should never be called manually! Use sink.push(val)",4,[[["self"],["sink"]]]],[18,"IS_FIXED","","Whether type has fixed length or not",4,N],[8,"EndpointInterface","","Endpoint interface for contracts",N,N],[10,"dispatch","","Dispatch payload for regular method",5,N],[10,"dispatch_ctor","","Dispatch constructor payload",5,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]]],"paths":[[4,"Error"],[3,"Stream"],[3,"Sink"],[8,"AsLog"],[8,"AbiType"],[8,"EndpointInterface"]]};
initSearch(searchIndex);
